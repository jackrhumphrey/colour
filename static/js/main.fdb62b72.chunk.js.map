{"version":3,"sources":["components/Swatch.js","components/App.js","serviceWorker.js","index.js"],"names":["Swatch","colour","className","parseInt","substr","style","background","App","React","colour1","Math","floor","random","toString","colour2","colours","setColours","midpoints","setMidpoints","updateValues","c1","c2","justifySelf","alignSelf","for","type","id","name","value","onChange","e","target","Input","min","max","c1red","c2red","c1green","c2green","c1blue","c2blue","n","swatchesList","i","red","redhex","round","length","green","greenhex","blue","bluehex","hex","map","swatch","index","key","swatches","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fdb62b72.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nimport \"./Swatch.css\";\r\n\r\nfunction Swatch({colour}) {\r\n\r\n    return (\r\n        <div className={`swatch ${parseInt(colour.substr(1, 2), 16) + parseInt(colour.substr(3, 2), 16) +parseInt(colour.substr(5, 2), 16) < 384 ? \"white\" : \"black\"}`} style={{background:colour}}>{colour}</div>\r\n    );\r\n}\r\n\r\nexport default Swatch;","import * as React from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport Swatch from \"./Swatch\";\r\n\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nfunction App() {\r\n  const [colours, setColours] = React.useState({\r\n    colour1: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\r\n    colour2: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\r\n  });\r\n  const [midpoints, setMidpoints] = React.useState(3);\r\n\r\n  const swatches = (c1, c2, midpoints) => {\r\n    var c1red = parseInt(c1.substr(1, 2), 16);\r\n    var c2red = parseInt(c2.substr(1, 2), 16);\r\n    var c1green = parseInt(c1.substr(3, 2), 16);\r\n    var c2green = parseInt(c2.substr(3, 2), 16);\r\n    var c1blue = parseInt(c1.substr(5, 2), 16);\r\n    var c2blue = parseInt(c2.substr(5, 2), 16);\r\n    var n = parseInt(midpoints);\r\n    var swatchesList = [];\r\n\r\n    for (var i = 0; i < n + 2; i++) {\r\n      var red = (c2red * i + c1red * (n + 1 - i)) / (n + 1);\r\n      var redhex = Math.round(red).toString(16);\r\n      if (redhex.length === 1) {\r\n        redhex = \"0\" + redhex;\r\n      }\r\n\r\n      var green = (c2green * i + c1green * (n + 1 - i)) / (n + 1);\r\n      var greenhex = Math.round(green).toString(16);\r\n      if (greenhex.length === 1) {\r\n        greenhex = \"0\" + greenhex;\r\n      }\r\n\r\n      var blue = (c2blue * i + c1blue * (n + 1 - i)) / (n + 1);\r\n      var bluehex = Math.round(blue).toString(16);\r\n      if (bluehex.length === 1) {\r\n        bluehex = \"0\" + bluehex;\r\n      }\r\n\r\n      var hex = \"#\" + redhex + greenhex + bluehex;\r\n\r\n      swatchesList = [...swatchesList, hex];\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {swatchesList.map((swatch, index) => (\r\n          <Swatch key={index} colour={swatch} />\r\n        ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const updateValues = React.useCallback((c1, c2, midpoints) => {\r\n    if (midpoints > 254) {\r\n      midpoints = 254;\r\n    }\r\n    if (midpoints < 1) {\r\n      midpoints = 1;\r\n    }\r\n    setColours({\r\n      colour1: c1,\r\n      colour2: c2\r\n    });\r\n    setMidpoints(midpoints);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"margin\">\r\n        <div className=\"inner\">\r\n          <div className=\"picker\">\r\n            <div className=\"pickerGrid\">\r\n              <label\r\n                style={{ justifySelf: \"end\", alignSelf: \"center\" }}\r\n                for=\"colour1\"\r\n              >\r\n                Colour 1\r\n              </label>\r\n              <input\r\n                type=\"color\"\r\n                id=\"colour1\"\r\n                name=\"colour1\"\r\n                value={colours.colour1}\r\n                onChange={e =>\r\n                  updateValues(e.target.value, colours.colour2, midpoints)\r\n                }\r\n              />\r\n              <label\r\n                style={{ justifySelf: \"end\", alignSelf: \"center\" }}\r\n                for=\"colour2\"\r\n              >\r\n                Colour 2\r\n              </label>\r\n              <input\r\n                type=\"color\"\r\n                id=\"colour2\"\r\n                name=\"colour2\"\r\n                value={colours.colour2}\r\n                onChange={e =>\r\n                  updateValues(colours.colour1, e.target.value, midpoints)\r\n                }\r\n              />\r\n              <label\r\n                style={{ justifySelf: \"end\", alignSelf: \"center\" }}\r\n                for=\"midpoints\"\r\n              >\r\n                Midpoints\r\n              </label>\r\n              <Input\r\n                type=\"number\"\r\n                id=\"midpoints\"\r\n                name=\"midpoints\"\r\n                min=\"1\"\r\n                max=\"254\"\r\n                value={midpoints}\r\n                onChange={e =>\r\n                  updateValues(colours.colour1, colours.colour2, e.target.value)\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"swatches\">\r\n            {swatches(colours.colour1, colours.colour2, midpoints)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"normalize.css\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}