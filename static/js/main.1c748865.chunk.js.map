{"version":3,"sources":["components/Swatch.js","components/App.js","serviceWorker.js","index.js"],"names":["Swatch","colour","style","background","App","React","colour1","Math","floor","random","toString","colour2","swatches","colours","setColours","midpoints","setMidpoints","average","c1","c2","console","log","c1red","parseInt","substr","c2red","c1green","c2green","c1blue","c2blue","n","i","red","redhex","round","length","green","greenhex","blue","bluehex","hex","className","Input","label","type","value","id","onChange","e","target","min","map","swatch","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c748865.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nimport \"./Swatch.css\";\r\n\r\nfunction Swatch({colour}) {\r\n    return (\r\n        <div style={{background:colour}}>{colour}</div>\r\n    );\r\n}\r\n\r\nexport default Swatch;","import * as React from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport Swatch from \"./Swatch\";\r\n\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nfunction App() {\r\n  const [colours, setColours] = React.useState({\r\n    colour1: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\r\n    colour2: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\r\n    swatches: []\r\n  });\r\n  const [midpoints, setMidpoints] = React.useState(1);\r\n\r\n  const average = React.useCallback(\r\n    (c1, c2, midpoints) => {\r\n      console.log(midpoints);\r\n\r\n      var c1red = parseInt(c1.substr(1, 2), 16);\r\n      var c2red = parseInt(c2.substr(1, 2), 16);\r\n      var c1green = parseInt(c1.substr(3, 2), 16);\r\n      var c2green = parseInt(c2.substr(3, 2), 16);\r\n      var c1blue = parseInt(c1.substr(5, 2), 16);\r\n      var c2blue = parseInt(c2.substr(5, 2), 16);\r\n      var swatches = [];\r\n      var n = parseInt(midpoints);\r\n\r\n      for (var i = 0; i < n + 2; i++) {\r\n        var red = ((c2red * i + c1red * (n + 1 - i)) / (n + 1));\r\n        var redhex = Math.round(red).toString(16);\r\n        if (redhex.length === 1) {\r\n          redhex = \"0\" + redhex;\r\n        }\r\n\r\n        var green = ((c2green * i + c1green * (n + 1 - i)) / (n + 1));\r\n        var greenhex = Math.round(green).toString(16);\r\n        if (greenhex.length === 1) {\r\n          greenhex = \"0\" + greenhex;\r\n        }\r\n\r\n        var blue = ((c2blue * i + c1blue * (n + 1 - i)) / (n + 1));\r\n        var bluehex = Math.round(blue).toString(16);\r\n        if (bluehex.length === 1) {\r\n          bluehex = \"0\" + bluehex;\r\n        }\r\n\r\n        var hex = \"#\" + redhex + greenhex + bluehex;\r\n\r\n        console.log(\"hex \" + hex);\r\n\r\n        swatches = [...swatches, hex]\r\n\r\n      }\r\n      setColours({\r\n        colour1: c1,\r\n        colour2: c2,\r\n        swatches: [...swatches]\r\n      });\r\n      setMidpoints(midpoints);\r\n\r\n    }, []\r\n  );\r\n\r\n  // const updateColour1 = React.useCallback(\r\n  //   e => {\r\n  //     console.log(e.target.value);\r\n  //     setColours({\r\n  //       ...colours,\r\n  //       colour1: e.target.value,\r\n  //     });\r\n  //     average(e.target.value, colours.colour2, 1);\r\n  //   },\r\n  //   [colours, average]\r\n  // );\r\n\r\n  // const updateColour2 = React.useCallback(\r\n  //   e => {\r\n  //     console.log(e.target.value);\r\n  //     setColours({\r\n  //       ...colours,\r\n  //       colour2: e.target.value\r\n  //     });\r\n  //     // average(colours.colour1, e.target.value, 1);\r\n  //   },\r\n  //   [colours, average]\r\n  // );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"inner\">\r\n        <div className=\"picker\">\r\n          <Input\r\n            label=\"Colour 1\"\r\n            type=\"color\"\r\n            value={colours.colour1}\r\n            id=\"colour1\"\r\n            onChange={e => average(e.target.value, colours.colour2, midpoints)}\r\n          />\r\n          <Input\r\n            label=\"Colour 2\"\r\n            type=\"color\"\r\n            value={colours.colour2}\r\n            id=\"colour2\"\r\n            onChange={e => average(colours.colour1, e.target.value, midpoints)}\r\n          />\r\n          <Input\r\n            label=\"Midpoints\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            value={midpoints}\r\n            onChange={(e) => {\r\n              average(colours.colour1, colours.colour2, e.target.value)\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"swatches\">\r\n          {colours.swatches.map((swatch, index) => <Swatch key={index} colour={swatch} />)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"normalize.css\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}