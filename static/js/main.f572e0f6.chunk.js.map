{"version":3,"sources":["components/Swatch.js","components/App.js","serviceWorker.js","index.js"],"names":["Swatch","colour","className","style","background","color","charAt","substring","c","parseInt","map","col","Math","pow","blackOrWhite","App","pad","React","number","length","colour1","floor","random","toString","colour2","colours","setColours","textInput","setTextInput","midpoints","setMidpoints","textMidpoints","setTextMidpoints","swatches","c1","c2","c1red","substr","c2red","c1green","c2green","c1blue","c2blue","n","swatchesList","i","red","redhex","round","green","greenhex","blue","bluehex","hex","swatch","index","key","textInputHandler","slice","toLowerCase","s","Option","updateColour","updateMidpoints","htmlFor","type","id","name","value","onChange","e","target","Input","maxLength","width","gridColumn","min","max","onBlur","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f572e0f6.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nimport \"./Swatch.css\";\r\n\r\nfunction Swatch({ colour }) {\r\n  function blackOrWhite(colour) {\r\n    var color = colour.charAt(0) === \"#\" ? colour.substring(1, 7) : colour;\r\n    var r = parseInt(color.substring(0, 2), 16); // hexToR\r\n    var g = parseInt(color.substring(2, 4), 16); // hexToG\r\n    var b = parseInt(color.substring(4, 6), 16); // hexToB\r\n    var uicolors = [r / 255, g / 255, b / 255];\r\n    var c = uicolors.map(col => {\r\n      if (col <= 0.03928) {\r\n        return col / 12.92;\r\n      }\r\n      return Math.pow((col + 0.055) / 1.055, 2.4);\r\n    });\r\n    var L = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\r\n    return L > 0.179 ? \"black\" : \"white\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"swatch\" style={{ background: colour }}>\r\n      <div className={`text ${blackOrWhite(colour)}`}>\r\n        {colour}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Swatch;\r\n","import * as React from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport Swatch from \"./Swatch\";\r\n\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nfunction App() {\r\n  const pad = React.useCallback(number => {\r\n    while (number.length < 6) {\r\n      number = \"0\" + number;\r\n    }\r\n    return number;\r\n  }, []);\r\n\r\n  const [colours, setColours] = React.useState({\r\n    colour1: \"#\" + pad(Math.floor(Math.random() * 16777215).toString(16)),\r\n    colour2: \"#\" + pad(Math.floor(Math.random() * 16777215).toString(16))\r\n  });\r\n  const [textInput, setTextInput] = React.useState({\r\n    colour1: colours.colour1,\r\n    colour2: colours.colour2\r\n  });\r\n  const [midpoints, setMidpoints] = React.useState(3);\r\n  const [textMidpoints, setTextMidpoints] = React.useState(midpoints);\r\n\r\n  const swatches = React.useCallback((c1, c2, midpoints) => {\r\n    var c1red = parseInt(c1.substr(1, 2), 16);\r\n    var c2red = parseInt(c2.substr(1, 2), 16);\r\n    var c1green = parseInt(c1.substr(3, 2), 16);\r\n    var c2green = parseInt(c2.substr(3, 2), 16);\r\n    var c1blue = parseInt(c1.substr(5, 2), 16);\r\n    var c2blue = parseInt(c2.substr(5, 2), 16);\r\n    var n = parseInt(midpoints);\r\n    var swatchesList = [];\r\n\r\n    for (var i = 0; i < n + 2; i++) {\r\n      var red = (c2red * i + c1red * (n + 1 - i)) / (n + 1);\r\n      var redhex = Math.round(red).toString(16);\r\n      if (redhex.length === 1) {\r\n        redhex = \"0\" + redhex;\r\n      }\r\n\r\n      var green = (c2green * i + c1green * (n + 1 - i)) / (n + 1);\r\n      var greenhex = Math.round(green).toString(16);\r\n      if (greenhex.length === 1) {\r\n        greenhex = \"0\" + greenhex;\r\n      }\r\n\r\n      var blue = (c2blue * i + c1blue * (n + 1 - i)) / (n + 1);\r\n      var bluehex = Math.round(blue).toString(16);\r\n      if (bluehex.length === 1) {\r\n        bluehex = \"0\" + bluehex;\r\n      }\r\n\r\n      var hex = \"#\" + redhex + greenhex + bluehex;\r\n\r\n      swatchesList = [...swatchesList, hex];\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {swatchesList.map((swatch, index) => (\r\n          <Swatch key={index} colour={swatch} />\r\n        ))}\r\n      </>\r\n    );\r\n  }, []);\r\n\r\n  const textInputHandler = React.useCallback(\r\n    (key, c) => {\r\n      if ((c.length > 0 && c.slice(0, 1) !== \"#\") || c.length < 1) {\r\n        c = \"#\" + c;\r\n      }\r\n      if (c.length > 7) {\r\n        c = c.slice(0, 7);\r\n      }\r\n      setTextInput({ ...textInput, [key]: c.toLowerCase() });\r\n      const s = new Option().style;\r\n      s.color = c;\r\n      if (s.color !== \"\" && c.length === 7) {\r\n        setColours({ ...colours, [key]: c });\r\n      } else if (s.color !== \"\" && c.length === 4) {\r\n        c =\r\n          c.slice(0, 2) +\r\n          c.slice(1, 2) +\r\n          c.slice(2, 3) +\r\n          c.slice(2, 3) +\r\n          c.slice(3, 4) +\r\n          c.slice(3, 4);\r\n        setColours({ ...colours, [key]: c });\r\n      }\r\n    },\r\n    [colours, textInput]\r\n  );\r\n\r\n  const updateColour = React.useCallback(\r\n    (key, c) => {\r\n      setColours({\r\n        ...colours,\r\n        [key]: c\r\n      });\r\n      setTextInput({\r\n        ...textInput,\r\n        [key]: c\r\n      });\r\n    },\r\n    [colours, textInput]\r\n  );\r\n\r\n  const updateMidpoints = React.useCallback(n => {\r\n    setTextMidpoints(n);\r\n    if (n > 254) {\r\n      n = 254;\r\n    }\r\n    if (n < 1) {\r\n      return;\r\n    }\r\n    setMidpoints(n);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"margin\">\r\n        <div className=\"inner\">\r\n          <div className=\"picker\">\r\n            <div className=\"pickerGrid\">\r\n              <label className=\"label\" htmlFor=\"colour1\">\r\n                Colour 1\r\n              </label>\r\n              <input\r\n                type=\"color\"\r\n                id=\"colour1\"\r\n                name=\"colour1\"\r\n                value={colours.colour1}\r\n                onChange={e => updateColour(\"colour1\", e.target.value)}\r\n              />\r\n              <Input\r\n                value={textInput.colour1}\r\n                maxLength=\"7\"\r\n                style={{ width: \"7em\" }}\r\n                onChange={e => {\r\n                  textInputHandler(\"colour1\", e.target.value);\r\n                }}\r\n              />\r\n              <label className=\"label\" htmlFor=\"colour2\">\r\n                Colour 2\r\n              </label>\r\n              <input\r\n                type=\"color\"\r\n                id=\"colour2\"\r\n                name=\"colour2\"\r\n                value={colours.colour2}\r\n                onChange={e => updateColour(\"colour2\", e.target.value)}\r\n              />\r\n              <Input\r\n                value={textInput.colour2}\r\n                maxLength=\"7\"\r\n                style={{ width: \"7em\" }}\r\n                onChange={e => textInputHandler(\"colour2\", e.target.value)}\r\n              />\r\n              <label className=\"label\" htmlFor=\"midpoints\">\r\n                Midpoints\r\n              </label>\r\n              <div style={{ gridColumn: \"2 / 4\" }}>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"midpoints\"\r\n                  name=\"midpoints\"\r\n                  min=\"1\"\r\n                  max=\"254\"\r\n                  value={textMidpoints}\r\n                  onChange={e => updateMidpoints(e.target.value)}\r\n                  onBlur={() => setTextMidpoints(midpoints)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"swatches\">\r\n            {swatches(colours.colour1, colours.colour2, midpoints)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"normalize.css\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}